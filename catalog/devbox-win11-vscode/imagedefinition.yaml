$schema: 1.0
name: devbox-win11-vscode
image: MicrosoftWindowsDesktop_windows-ent-cpc_win11-24h2-ent-cpc

# Läuft im SYSTEM-Kontext (OK für Features/DISM)
tasks:
  - name: powershell
    parameters:
      command: |
        # WSL/VM-Features aktivieren (kein Neustart erzwingen)
        dism.exe /online /enable-feature /featurename:Microsoft-Windows-Subsystem-Linux /all /norestart
        dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart

# Läuft im USER-Kontext (winget & code-CLI verfügbar)
userTasks:
  # VS Code installieren (built-in WinGet Task)
  - name: winget
    parameters:
      package: Microsoft.VisualStudioCode

  # Notepad++ installieren (built-in WinGet Task)
  - name: winget
    parameters:
      package: Notepad++.Notepad++

  # Ubuntu 24.04 als WSL-Distribution installieren (per Winget-Paket)
  - name: winget
    parameters:
      package: Canonical.Ubuntu.2404

  # WSL auf Version 2 setzen und Ubuntu als default setzen
  - name: powershell
    parameters:
      command: |
        wsl --set-default-version 2
        # Wenn mehrere Distros vorhanden sind, nur setzen wenn Ubuntu 24.04 installiert ist
        if (wsl -l -q | Select-String -SimpleMatch "Ubuntu-24.04") {
          wsl --set-default Ubuntu-24.04
        }

  # VS Code WSL-Extension installieren (verwende code.cmd Pfad, falls PATH noch nicht aktualisiert)
  - name: powershell
    parameters:
      command: |
        $codeCmd = Join-Path $env:LOCALAPPDATA "Programs\Microsoft VS Code\bin\code.cmd"
        if (-not (Test-Path $codeCmd)) {
          throw "VS Code CLI (code.cmd) nicht gefunden."
        }
        & "$codeCmd" --install-extension ms-vscode-remote.remote-wsl --force

  # Verifikation (USER-Kontext, damit Pfade/CLI stimmen)
  - name: powershell
    parameters:
      command: |
        # VS Code vorhanden?
        $codeCmd = Join-Path $env:LOCALAPPDATA "Programs\Microsoft VS Code\bin\code.cmd"
        if (-not (Test-Path $codeCmd)) { throw "Visual Studio Code ist nicht korrekt installiert." }

        # Notepad++ vorhanden?
        $npp = (Get-Command "notepad++.exe" -ErrorAction SilentlyContinue).Path
        if (-not $npp) { throw "Notepad++ ist nicht korrekt installiert." }

        # WSL Status prüfen
        wsl --status | Out-Null
        if ($LASTEXITCODE -ne 0) { throw "WSL ist nicht korrekt installiert/aktiv." }

        # Ubuntu 24.04 vorhanden?
        if (-not (wsl -l -v | Select-String -SimpleMatch "Ubuntu-24.04")) {
          throw "Ubuntu 24.04 ist nicht als WSL-Distribution installiert."
        }

        # WSL-Extension in VS Code installiert?
        $extList = & "$codeCmd" --list-extensions
        if (-not ($extList | Select-String -SimpleMatch "ms-vscode-remote.remote-wsl")) {
          throw "VS Code WSL-Extension ist nicht installiert."
        }
